import XCTest
@testable import StringExtensionKit

final class StringExtensionKitTests: XCTestCase {
    var testCasesForRemovingAllCharactersAllButDigits = [
        (input: "Hello 1234 Number", expectation: "1234"),
        (input: "Hello €±€≤€≥€¥ Number", expectation: "€±€≤€≥€¥"),
        (input: "Hello 12€≥€¥ Number", expectation: "12€≥€¥"),
        (input: "‚ò∫Ô∏è 1234 üòõ"       , expectation: "1234"),
        (input: "\n 1234 \n"       , expectation: "1234")
    ]

    func testRemovingAllCharactersButDigits() {
        for testCase in testCasesForRemovingAllCharactersAllButDigits {
            let toTest = testCase.input.clippingCharacters(in: CharacterSet.decimalDigits.inverted)
            XCTAssertEqual(toTest, testCase.expectation)
        }
    }

    ///

    var testCasesForRemovingDigits = [
        (input: "Hello 1234 Number", expectation: "Hello  Number"),
        (input: "Hello €±€≤€≥€¥ Number", expectation: "Hello  Number"),
        (input: "Hello 12€≥€¥ Number", expectation: "Hello  Number"),
        (input: "‚ò∫Ô∏è 1234 üòõ"       , expectation: "‚ò∫Ô∏è  üòõ"),
        (input: "\n 1234 \n"       , expectation: "\n  \n")
    ]

    func testRemovingAllDigits() {
        for testCase in testCasesForRemovingDigits {
            let toTest = testCase.input.clippingCharacters(in: CharacterSet.decimalDigits)
            XCTAssertEqual(toTest, testCase.expectation)
        }
    }

    ///

    var testCasesConvertingAllDigitsToEnglish = [
        (input: "€∞€±€≤€≥€¥€µ€∂€∑€∏"       , expectation: "012345678"),
        (input: "€∞1€≤3€¥5€∂7€∏"       , expectation: "012345678"),
        (input: "Hello €∞€±€≤€≥€¥€µ€∂€∑€∏" , expectation: "Hello 012345678"),
        (input: "ÿ≥ŸÑÿßŸÖ €∞€±€≤€≥€¥€µ€∂€∑€∏€π"  , expectation: "ÿ≥ŸÑÿßŸÖ 0123456789"),
        (input: "0000€∞€∞€∞€∞"        , expectation: "00000000"),
        (input: "ÿ≥ŸÑÿßŸÖ"             , expectation: "ÿ≥ŸÑÿßŸÖ"),
        (input: "Hello"           , expectation: "Hello"),
    ]

    func testConvertingAllDigitsToEnglish() {
        for testCase in testCasesConvertingAllDigitsToEnglish {
            let toTest = testCase.input.convertedDigitsToLocale(Locale(identifier: "En"))
            XCTAssertEqual(toTest, testCase.expectation)
        }
    }

    ///

    var testCasesConvertingAllDigitsToPersian = [
        (input: "€∞€±€≤€≥€¥€µ€∂€∑€∏€π"        , expectation: "€∞€±€≤€≥€¥€µ€∂€∑€∏€π"),
        (input: "€∞1€≤3€¥5€∂7€∏9"        , expectation: "€∞€±€≤€≥€¥€µ€∂€∑€∏€π"),
        (input: "Hello €∞€±€≤€≥€¥€µ€∂€∑€∏€π"  , expectation: "Hello €∞€±€≤€≥€¥€µ€∂€∑€∏€π"),
        (input: "Hello 0123456789" , expectation: "Hello €∞€±€≤€≥€¥€µ€∂€∑€∏€π"),
        (input: "ÿ≥ŸÑÿßŸÖ €∞€±€≤€≥€¥€µ€∂€∑€∏€π"    , expectation: "ÿ≥ŸÑÿßŸÖ €∞€±€≤€≥€¥€µ€∂€∑€∏€π"),
        (input: "ÿ≥ŸÑÿßŸÖ 0123456789"    , expectation: "ÿ≥ŸÑÿßŸÖ €∞€±€≤€≥€¥€µ€∂€∑€∏€π"),
        (input: "0000€∞€∞€∞€∞"          , expectation: "€∞€∞€∞€∞€∞€∞€∞€∞"),
        (input: "ÿ≥ŸÑÿßŸÖ"               , expectation: "ÿ≥ŸÑÿßŸÖ"),
        (input: "Hello"             , expectation: "Hello"),
    ]

    func testConvertingAllDigitsToPersian() {
        for testCase in testCasesConvertingAllDigitsToPersian {
            let toTest = testCase.input.convertedDigitsToLocale(Locale(identifier: "Fa"))
            XCTAssertEqual(toTest, testCase.expectation)
        }
    }

    ///

    func testConvertingAllDigitsToEnglishUsingLocalIdentifier() {
        for testCase in testCasesConvertingAllDigitsToEnglish {
            let toTest = testCase.input.convertedDigitsToLocale(identifier: "En")
            XCTAssertEqual(toTest, testCase.expectation)
        }
    }

    ///

    func testConvertingAllDigitsToPersianUsingLocalIdentifier() {
        for testCase in testCasesConvertingAllDigitsToPersian {
            let toTest = testCase.input.convertedDigitsToLocale(identifier: "Fa")
            XCTAssertEqual(toTest, testCase.expectation)
        }
    }
    
    ///

    var testCasesReplacingPrefix = [
        (initial: "Hello world", prefix: "Hello", replacingWith: "Goodbye", expectation: "Goodbye world"),
        (initial: "ÿ≥ŸÑÿßŸÖ ÿØŸÜ€åÿß", prefix: "ÿ≥ŸÑÿßŸÖ", replacingWith: "ÿÆÿØÿß ŸÜ⁄ØŸáÿØÿßÿ±", expectation: "ÿÆÿØÿß ŸÜ⁄ØŸáÿØÿßÿ± ÿØŸÜ€åÿß"),
    ]

    func testRemovingPrefix() {
        for testCase in testCasesReplacingPrefix {
            let toTest = testCase.initial.replacing(prefix: testCase.prefix, with: testCase.replacingWith)
            XCTAssertEqual(toTest, testCase.expectation)
        }
    }

    func testRemovePrefix() {
        for testCase in testCasesReplacingPrefix {
            var toTest = testCase.initial
            toTest.replace(prefix: testCase.prefix, with: testCase.replacingWith)
            XCTAssertEqual(toTest, testCase.expectation)
        }
    }
    
    ///

    var testCasesPrepending = [
        (initial: "world", prefix: "Hello ", expectation: "Hello world"),
    ]

    func testPrepending() {
        for testCase in testCasesPrepending {
            let toTest = testCase.initial.prepending(testCase.prefix)
            XCTAssertEqual(toTest, testCase.expectation)
        }
    }

    func testPrependMutation() {
        for testCase in testCasesPrepending {
            var toTest = testCase.initial
            toTest.prepend(testCase.prefix)
            XCTAssertEqual(toTest, testCase.expectation)
        }
    }
}
